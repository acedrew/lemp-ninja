server {
    #listen   80; ## listen for ipv4; this line is default and implied
    #listen   [::]:80 default_server ipv6only=on; ## listen for ipv6
    root /opt/htdocs/{{ domain_list[0] }};
    index index.php index.html index.htm;
    # Make site accessible from http://localhost/
    server_name {% for domain in domain_list %} {{ domain }} {% endfor %} ;
    access_log /var/log/nginx/{{ domain_list[0] }}.access.log;

    location ~* \.(woff|ico|png)$ {
        expires 192h;
    }

        # ugly but necessary regex.
    location @wordpress {
                rewrite ^.*/files/(.*) /wp-includes/ms-files.php?file=$1;
                 if (!-e $request_filename) {
                  rewrite ^.+/?(/wp-.*) $1 last;
                        rewrite ^.+/?(/.*\.php)$ $1 last;
                        rewrite ^(.+)$ /index.php?q=$1 last;
                }
                # use browser side caching for these
                expires 30d;
                add_header Cache-Control private;
    }

        # enable purging of stale content.
        # see this plugin:
        # http://wordpress.org/extend/plugins/nginx-proxy-cache-purge/
        # activate it network wide

    location ~ /purge(/.*) {
          fastcgi_cache_purge microcache $host$1$request_method;
                allow 50.116.43.246;
                deny all;
    }

    location ~ \.php$ {
                # Zero-day exploit defense
                # http://forum.nginx.org/read.php?2,88845,page=3
                # Won't work properly (404 error) if the file is not stored on this
                #server, which is entirely possible with php-fpm/php-fcgi.
                # Comment the 'try_files' line out if you set up php-fpm/php-fcgi on
                #another machine.  And then cross your fingers that you won't get hacked.
                try_files $uri =404;

                # checks to see if the visitor is logged in, a commenter,
                # or some other user who should bypass cache
                set $nocache "";
                if ($http_cookie ~ (comment_author_.*|wordpress_logged_in.*|wp-postpass_.*)) {
                  set $nocache "Y";
                }
 
                #the usual fastcgi pass, I like unix sockets, less resource contention
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_param    REMOTE_ADDR  $http_client_ip;
                fastcgi_index    index.php;
                fastcgi_param    SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include fastcgi_params;
                fastcgi_pass    unix:/var/run/php5-fpm.sock;
                # here is the fastcgi caching magic:

                # bypass cache if logged in.
                # Be sure that this is above all other fastcgi_cache directives
                fastcgi_no_cache $nocache;
                fastcgi_cache_bypass $nocache;

                # use stale cache if the backend fails.
                fastcgi_cache_use_stale error timeout invalid_header http_500;
 
                # cache key is based on the host and the uri, you could add other
                # key variables here as it suites your needs
                fastcgi_cache_key $host$request_uri$request_method;
                fastcgi_cache    microcache;
 
                # what to cache, and for how long
                fastcgi_cache_valid      200 302 10m;
                fastcgi_cache_valid      301 1h;
                fastcgi_cache_valid      any 1m;
 
        }
 
        location /nginx_status {
                # copied from http://blog.kovyrin.net/2006/04/29/monitoring-nginx-with-rrdtool/
                stub_status on;
                access_log       off;
                allow 50.116.43.246;
                deny all;
        }
}

